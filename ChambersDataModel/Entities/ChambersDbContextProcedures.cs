// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ChambersDataModel.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ChambersDataModel.Entities
{
    public partial class ChambersDbContext
    {
        private IChambersDbContextProcedures _procedures;

        public virtual IChambersDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ChambersDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IChambersDbContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CreateCompressedPointResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetBAUExcursionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spDriverExcursionsPointsForDateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spPivotExcursionPointsResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ChambersDbContextProcedures : IChambersDbContextProcedures
    {
        private readonly ChambersDbContext _context;

        public ChambersDbContextProcedures(ChambersDbContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CreateCompressedPointResult>> CreateCompressedPointAsync(string CurveName, string tagName, int? offsetDays, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CurveName",
                    Size = 32,
                    Value = CurveName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tagName",
                    Size = 256,
                    Value = tagName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "offsetDays",
                    Value = offsetDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CreateCompressedPointResult>("EXEC @returnValue = [BB50PCSjsantos].[CreateCompressedPoint] @CurveName, @tagName, @offsetDays", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBAUExcursionsResult>> GetBAUExcursionsAsync(string TagsList, DateTime? AfterDate, DateTime? BeforeDate, int? DurationThreshold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TagsList",
                    Size = -1,
                    Value = TagsList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AfterDate",
                    Value = AfterDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BeforeDate",
                    Value = BeforeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DurationThreshold",
                    Value = DurationThreshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBAUExcursionsResult>("EXEC @returnValue = [dbo].[GetBAUExcursions] @TagsList, @AfterDate, @BeforeDate, @DurationThreshold", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDriverExcursionsPointsForDateResult>> spDriverExcursionsPointsForDateAsync(DateTime? FromDate, DateTime? ToDate, string StageDateIds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StageDateIds",
                    Size = -1,
                    Value = StageDateIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDriverExcursionsPointsForDateResult>("EXEC @returnValue = [dbo].[spDriverExcursionsPointsForDate] @FromDate, @ToDate, @StageDateIds", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spGetStatsAsync(string TagName, DateTime? FirstExcDate, DateTime? LastExcDate, OutputParameter<int?> ExcPointsCount, OutputParameter<double?> MinValue, OutputParameter<double?> MaxValue, OutputParameter<double?> AvergValue, OutputParameter<double?> StdDevValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterExcPointsCount = new SqlParameter
            {
                ParameterName = "ExcPointsCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ExcPointsCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterMinValue = new SqlParameter
            {
                ParameterName = "MinValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = MinValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterMaxValue = new SqlParameter
            {
                ParameterName = "MaxValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = MaxValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterAvergValue = new SqlParameter
            {
                ParameterName = "AvergValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AvergValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterStdDevValue = new SqlParameter
            {
                ParameterName = "StdDevValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = StdDevValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TagName",
                    Size = 255,
                    Value = TagName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstExcDate",
                    Value = FirstExcDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastExcDate",
                    Value = LastExcDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterExcPointsCount,
                parameterMinValue,
                parameterMaxValue,
                parameterAvergValue,
                parameterStdDevValue,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spGetStats] @TagName, @FirstExcDate, @LastExcDate, @ExcPointsCount OUTPUT, @MinValue OUTPUT, @MaxValue OUTPUT, @AvergValue OUTPUT, @StdDevValue OUTPUT", sqlParameters, cancellationToken);

            ExcPointsCount.SetValue(parameterExcPointsCount.Value);
            MinValue.SetValue(parameterMinValue.Value);
            MaxValue.SetValue(parameterMaxValue.Value);
            AvergValue.SetValue(parameterAvergValue.Value);
            StdDevValue.SetValue(parameterStdDevValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spPivotExcursionPointsResult>> spPivotExcursionPointsAsync(int? StageDateId, DateTime? StartDate, DateTime? EndDate, double? LowThreashold, double? HiThreashold, TimeSpan? TimeStep, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StageDateId",
                    Value = StageDateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LowThreashold",
                    Value = LowThreashold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "HiThreashold",
                    Value = HiThreashold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "TimeStep",
                    Value = TimeStep ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Time,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spPivotExcursionPointsResult>("EXEC @returnValue = [dbo].[spPivotExcursionPoints] @StageDateId, @StartDate, @EndDate, @LowThreashold, @HiThreashold, @TimeStep", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spSeedForTestsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [BB50PCSjsantos].[spSeedForTests]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
