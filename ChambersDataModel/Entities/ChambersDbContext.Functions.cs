// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Linq;
using ChambersDataModel.Entities;

namespace ChambersDataModel.Entities
{
    public partial class ChambersDbContext
    {

        [DbFunction("fn_SplitJoin", "dbo")]
        public static string fn_SplitJoin(string StringWithDelimiters, string Delimiter, string Prefix, string Sufix, string NewDelimiter)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnCalcTimeStep", "dbo")]
        public static TimeSpan? fnCalcTimeStep(DateTime? StartDate, DateTime? EndDate, int? NbrOfPoints)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnGetBAUExcursions", "dbo")]
        public IQueryable<fnGetBAUExcursionsResult> fnGetBAUExcursions(DateTime? AfterDate, DateTime? BeforeDate, string TagIdsList, int? MinDurationInSecs, int? ActiveOnly)
        {
            return FromExpression(() => fnGetBAUExcursions(AfterDate, BeforeDate, TagIdsList, MinDurationInSecs, ActiveOnly));
        }

        [DbFunction("fnGetExcursionsCounts", "dbo")]
        public IQueryable<fnGetExcursionsCountsResult> fnGetExcursionsCounts(string TagNamesList, int? MinHiCount, int? MinLowCount, DateTime? AfterDate, DateTime? BeforeDate)
        {
            return FromExpression(() => fnGetExcursionsCounts(TagNamesList, MinHiCount, MinLowCount, AfterDate, BeforeDate));
        }

        [DbFunction("fnGetExcursionsDetails", "dbo")]
        public IQueryable<fnGetExcursionsDetailsResult> fnGetExcursionsDetails(string TagName, DateTime? AfterDate, DateTime? BeforeDate, int? MinHiCount, int? MinLowCount)
        {
            return FromExpression(() => fnGetExcursionsDetails(TagName, AfterDate, BeforeDate, MinHiCount, MinLowCount));
        }

        [DbFunction("fnGetInterp2", "dbo")]
        public IQueryable<fnGetInterp2Result> fnGetInterp2(string TagName, DateTime? StartDate, DateTime? EndDate, TimeSpan? TimeStep)
        {
            return FromExpression(() => fnGetInterp2(TagName, StartDate, EndDate, TimeStep));
        }

        [DbFunction("fnGetOverlappingDates", "dbo")]
        public IQueryable<fnGetOverlappingDatesResult> fnGetOverlappingDates(DateTime? StartDate1, DateTime? endDate1, DateTime? StartDate2, DateTime? endDate2)
        {
            return FromExpression(() => fnGetOverlappingDates(StartDate1, endDate1, StartDate2, endDate2));
        }

        [DbFunction("fnGetScheduleDates", "dbo")]
        public IQueryable<fnGetScheduleDatesResult> fnGetScheduleDates(DateTime? ForDate, DateTime? StartDate, int? CoverageValue, string CoverageIntervalUnit, int? RepeatEveryValue, string RepeatEveryIntervalUnit)
        {
            return FromExpression(() => fnGetScheduleDates(ForDate, StartDate, CoverageValue, CoverageIntervalUnit, RepeatEveryValue, RepeatEveryIntervalUnit));
        }

        [DbFunction("fnToDuration", "dbo")]
        public static int? fnToDuration(string SDuration)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnToStructDuration", "dbo")]
        public static string fnToStructDuration(int? totalSeconds)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<fnGetBAUExcursionsResult>().HasNoKey();
            modelBuilder.Entity<fnGetExcursionsCountsResult>().HasNoKey();
            modelBuilder.Entity<fnGetExcursionsDetailsResult>().HasNoKey();
            modelBuilder.Entity<fnGetInterp2Result>().HasNoKey();
            modelBuilder.Entity<fnGetOverlappingDatesResult>().HasNoKey();
            modelBuilder.Entity<fnGetScheduleDatesResult>().HasNoKey();
        }
    }
}
